/** Provides a fast approximation of math functions using a Pade approximant
    continued fraction, calculated sample by sample.
    Note: This is an approximation which works on a limited range. You are
    advised to use input values only between -5 and +5 for limiting the error.

    Ported with kind permission of Jules Storer.
    https://forum.juce.com/t/math-functions-in-littlefoot/33415
*/


float cosh (float x)
{
    float x2 = x * x;
    float numerator = -(39251520 + x2 * (18471600 + x2 * (1075032 + 14615 * x2)));
    float denominator = -39251520 + x2 * (1154160 + x2 * (-16632 + 127 * x2));
    return numerator / denominator;
}



float sinh (float x)
{
    float x2 = x * x;
    float numerator = -x * (11511339840 + x2 * (1640635920 + x2 * (52785432 + x2 * 479249)));
    float denominator = -11511339840 + x2 * (277920720 + x2 * (-3177720 + x2 * 18361));
    return numerator / denominator;
}

float tanh (float x)
{
    float x2 = x * x;
    float numerator = x * (135135 + x2 * (17325 + x2 * (378 + x2)));
    float denominator = 135135 + x2 * (62370 + x2 * (3150 + 28 * x2));
    return numerator / denominator;
}


float cos (float x)
{
    float x2 = x * x;
    float numerator = -(-39251520 + x2 * (18471600 + x2 * (-1075032 + 14615 * x2)));
    float denominator = 39251520 + x2 * (1154160 + x2 * (16632 + x2 * 127));
    return numerator / denominator;
}

float sin (float x)
{
    float x2 = x * x;
    float numerator = -x * (-11511339840 + x2 * (1640635920 + x2 * (-52785432 + x2 * 479249)));
    float denominator = 11511339840 + x2 * (277920720 + x2 * (3177720 + x2 * 18361));
    return numerator / denominator;
}

float tan (float x)
{
    float x2 = x * x;
    float numerator = x * (-135135 + x2 * (17325 + x2 * (-378 + x2)));
    float denominator = -135135 + x2 * (62370 + x2 * (-3150 + 28 * x2));
    return numerator / denominator;
}

float exp (float x)
{
    float numerator = 1680 + x * (840 + x * (180 + x * (20 + x)));
    float denominator = 1680 + x *(-840 + x * (180 + x * (-20 + x)));
    return numerator / denominator;
}


float atan2(float y, float x )
{
    float PI   = 3.14159265358979323846264338327950288;
	float PIBY2 = 1.5707963267948966;

	if ( x == 0.0 ) {
		if ( y > 0.0 ) return PIBY2;
		if ( y == 0.0 ) return 0.0;
		return -PIBY2;
	}
	float atan;
	float z = y/x;
	if ( abs( z ) < 1.0 ) {
		atan = z/(1.0 + 0.28*z*z);
		if ( x < 0.0 ) {
			if ( y < 0.0 ) return atan - PI;
			return atan + PI;
		}
	} else {
		atan = PIBY2 - z/(z*z + 0.28);
		if ( y < 0.0 ) return atan - PI;
	}
	return atan;
}



float sqrt(float n) {
	if (n == 0.0) return 0.0;

	float t;
	float squareRoot = n / 2;

	do {
		t = squareRoot;
		squareRoot = (t + (n / t)) / 2;
	} while ((t - squareRoot) != 0);;

	return squareRoot;
}


float calcAngleDegrees(float x, float y) {
  float PI   = 3.14159265358979323846264338327950288;
  return atan2(y, x) * (180 / PI);
}

float radius(float x, float y)
{
	return sqrt((x*x) + (y*y))
}


